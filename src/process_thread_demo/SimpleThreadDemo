public class SimpleThreadDemo {

    // 1. Define the task using the Runnable interface
    static class SimpleWorker implements Runnable {
        private String name;

        public SimpleWorker(String name) {
            this.name = name;
        }

        // The job this thread will perform
        @Override
        public void run() {
            System.out.println("-> " + name + ": STARTED running inside the Process.");
            try {
                // Simulate doing some work
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
            System.out.println("-> " + name + ": FINISHED its job.");
        }
    }

    public static void main(String[] args) throws InterruptedException {
        // --- PROCESS CONTEXT ---
        // The JVM running this code is the Process.
        System.out.println("--- JVM PROCESS STARTED ---");

        // 2. Identify the initial thread (the Main Thread)
        String mainThreadName = Thread.currentThread().getName();
        System.out.println("PROCESS INFO: The current thread is the " + mainThreadName + ".");

        // --- THREAD CREATION AND EXECUTION ---

        // 3. Create a new task and a new Thread object
        SimpleWorker task = new SimpleWorker("Worker-Thread");
        Thread worker = new Thread(task); // Thread is added to the Process

        // 4. Start the worker thread
        System.out.println("\n" + mainThreadName + " is instructing Worker-Thread to START...");
        worker.start(); // Moves Worker-Thread to the RUNNABLE state

        // 5. Main Thread continues its own work concurrently
        System.out.println(mainThreadName + " is doing its own work while waiting.");
        Thread.sleep(500); // Main Thread waits for 0.5 seconds

        // 6. Main Thread waits for the worker to finish
        worker.join(); // Main Thread pauses until Worker-Thread is TERMINATED

        System.out.println("\n" + mainThreadName + ": All threads complete.");
        System.out.println("--- JVM PROCESS EXITING ---");
    }
}